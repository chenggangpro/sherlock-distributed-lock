buildscript {
  ext {
    versions = [
        reactor        : '3.2.10.RELEASE',
        mongodb        : '3.10.2',
        mongodbReactive: '1.11.0',
        logback        : '1.2.3',
        // test dependencies:
        testContainers : '1.11.3',
        groovy         : '2.5.5',
        spock          : '1.2-groovy-2.5'
    ]
  }
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'jacoco'
  id 'pl.allegro.tech.build.axion-release' version '1.10.1'
  id 'com.github.kt3k.coveralls' version '2.8.4'
  id 'com.coditory.integration-test' version '1.0.6' apply false
}

allprojects {
  group = 'com.coditory.sherlock'
  version = scmVersion.version

  repositories {
    mavenCentral()
  }
}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'groovy'
  apply plugin: 'jacoco'
  apply plugin: 'com.coditory.integration-test'
  sourceCompatibility = 11

  repositories {
    mavenCentral()
  }

  // make nicer archive names
  archivesBaseName = (rootProject.name + '-' + project.name)
      .replaceAll('-api-', '-')

  dependencies {
    testCompile "ch.qos.logback:logback-core:$versions.logback"
    testCompile "ch.qos.logback:logback-classic:$versions.logback"
    testCompile "org.codehaus.groovy:groovy-all:$versions.groovy"
    testCompile "org.spockframework:spock-core:$versions.spock"
  }

  tasks.withType(Test) {
    testLogging {
      exceptionFormat = 'full'
      events = ['passed', 'skipped', 'failed']
    }
  }
}

scmVersion {
  versionCreator 'versionWithBranch'
  tag {
    prefix = project.name
  }
  hooks {
    // update version in readme.md
    pre 'fileUpdate', [
        file: 'readme.md',
        pattern: { v, p -> /'$v'/ },
        replacement: { v, p -> "'$v'" }
    ]
    pre 'commit'
  }
}

// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll {
  ![':client', ':tests'].contains(it.path)
}

task jacocoMerge(type: JacocoMerge) {
  publishedProjects.each { subproject ->
    executionData subproject.tasks.withType(Test)
  }
  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'
  dependsOn publishedProjects.test, jacocoMerge

  additionalSourceDirs.from(publishedProjects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from(publishedProjects.sourceSets.main.allSource.srcDirs)
  classDirectories.from(publishedProjects.sourceSets.main.output)
  executionData jacocoMerge.destinationFile

  reports {
    html.enabled = true // human readable
    xml.enabled = true // required by coveralls
  }
}

coveralls {
  sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'
  dependsOn jacocoRootReport
  onlyIf { System.env['CI'] }
}
