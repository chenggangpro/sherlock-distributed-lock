buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'jacoco'
  id 'pl.allegro.tech.build.axion-release' version '1.10.1'
  id 'com.github.kt3k.coveralls' version '2.8.4'
  id 'com.coditory.integration-test' version '1.0.6' apply false
}

allprojects {
  group = 'com.coditory.xlock'
  version = scmVersion.version
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'groovy'
  apply plugin: 'com.coditory.integration-test'
  sourceCompatibility = JavaVersion.VERSION_11

  repositories {
    mavenCentral()
  }

  dependencies {
    testCompile "ch.qos.logback:logback-core:1.2.3"
    testCompile "ch.qos.logback:logback-classic:1.2.3"
    testCompile "org.codehaus.groovy:groovy-all:2.5.5"
    testCompile "org.spockframework:spock-core:1.2-groovy-2.5"
  }

  tasks.withType(Test) {
    testLogging {
      exceptionFormat = 'full'
      events = ['passed', 'skipped', 'failed']
    }
  }
}

scmVersion {
  versionCreator 'versionWithBranch'
  tag {
    prefix = project.name
  }
  hooks {
    pre 'fileUpdate', [file: 'readme.md', pattern: { v, p -> /'$v'/ }, replacement: { v, p -> "'$v'" }]
    pre 'commit'
  }
}

// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll {
  ![':distributed-lock-client', ':distributed-lock-tests'].contains(it.path)
}

task jacocoMerge(type: JacocoMerge) {
  publishedProjects.each { subproject ->
    executionData subproject.tasks.withType(Test)
  }
  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'
  dependsOn publishedProjects.test, jacocoMerge

  additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  classDirectories = files(publishedProjects.sourceSets.main.output)
  executionData jacocoMerge.destinationFile

  reports {
    html.enabled = true // human readable
    xml.enabled = true // required by coveralls
  }
}

coveralls {
  sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
  group = 'Coverage reports'
  description = 'Uploads the aggregated coverage report to Coveralls'

  dependsOn jacocoRootReport
  onlyIf { System.env.'CI' && !JavaVersion.current().isJava9Compatible() }
}
